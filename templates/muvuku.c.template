/**
 * Muvuku: An STK data collection framework
 *
 * Copyright 2011-2012 Medic Mobile, Inc. <hello@medicmobile.org>
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL MEDIC MOBILE BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "muvuku.h"
#include "actions.h"

/**
    IMPORTANT:
        This file is generated automatically at build-time.
        Do not edit this file directly -- to make changes
        to a form, please modify the contents of forms/json.
**/

/* ----------------------------------------------------------------------*/

/* Standard validations:
    These functions are currently referenced by name. */

lc_char PROGMEM lc_err_numeric[] = {
    LC_EN("you must enter a number")
    LC_FR("vous devez inscrire un num\5ro")
    LC_ES("usted debe escribir un n\6mero")
    LC_END
};

u8 is_numeric(schema_list_t *l, schema_item_t *i)
{
    if (is_numeric_string(i->string_value)) {
        return TRUE;
    }

    return schema_item_fail_validation(i, locale(lc_err_numeric));
}
/* ----------------------------------------------------------------------*/

/* Standard strings:
    Localized months of the year. */

#ifdef _SCHEMA_INCLUDE_DATES

u8 PROGMEM lc_months_en_m1[] = "January";
u8 PROGMEM lc_months_en_m2[] = "February";
u8 PROGMEM lc_months_en_m3[] = "March";
u8 PROGMEM lc_months_en_m4[] = "April";
u8 PROGMEM lc_months_en_m5[] = "May";
u8 PROGMEM lc_months_en_m6[] = "June";
u8 PROGMEM lc_months_en_m7[] = "July";
u8 PROGMEM lc_months_en_m8[] = "August";
u8 PROGMEM lc_months_en_m9[] = "September";
u8 PROGMEM lc_months_en_m10[] = "October";
u8 PROGMEM lc_months_en_m11[] = "November";
u8 PROGMEM lc_months_en_m12[] = "December";

u8 PROGMEM lc_months_fr_m1[] = "Janvier";
u8 PROGMEM lc_months_fr_m2[] = "F\5vrier";
u8 PROGMEM lc_months_fr_m3[] = "Mars";
u8 PROGMEM lc_months_fr_m4[] = "Avril";
u8 PROGMEM lc_months_fr_m5[] = "Mai";
u8 PROGMEM lc_months_fr_m6[] = "Juin";
u8 PROGMEM lc_months_fr_m7[] = "Juillet";
u8 PROGMEM lc_months_fr_m8[] = "Aout";
u8 PROGMEM lc_months_fr_m9[] = "Septembre";
u8 PROGMEM lc_months_fr_m10[] = "Octobre";
u8 PROGMEM lc_months_fr_m11[] = "Novembre";
u8 PROGMEM lc_months_fr_m12[] = "D\5cembre";

u8 PROGMEM lc_months_es_m1[] = "Enero"; 
u8 PROGMEM lc_months_es_m2[] = "Febrero"; 
u8 PROGMEM lc_months_es_m3[] = "Marzo"; 
u8 PROGMEM lc_months_es_m4[] = "Abril"; 
u8 PROGMEM lc_months_es_m5[] = "Mayo"; 
u8 PROGMEM lc_months_es_m6[] = "Junio"; 
u8 PROGMEM lc_months_es_m7[] = "Julio"; 
u8 PROGMEM lc_months_es_m8[] = "Agosto"; 
u8 PROGMEM lc_months_es_m9[] = "Septiembre"; 
u8 PROGMEM lc_months_es_m10[] = "Octubre"; 
u8 PROGMEM lc_months_es_m11[] = "Noviembre"; 
u8 PROGMEM lc_months_es_m12[] = "Diciembre";

const u8 *PROGMEM lc_builtin_months_en[] = {
    lc_months_en_m1, lc_months_en_m2, lc_months_en_m3, lc_months_en_m4,
    lc_months_en_m5, lc_months_en_m6, lc_months_en_m7, lc_months_en_m8,
    lc_months_en_m9, lc_months_en_m10, lc_months_en_m11, lc_months_en_m12
}; 

const u8 *PROGMEM lc_builtin_months_fr[] = {
    lc_months_fr_m1, lc_months_fr_m2, lc_months_fr_m3, lc_months_fr_m4,
    lc_months_fr_m5, lc_months_fr_m6, lc_months_fr_m7, lc_months_fr_m8,
    lc_months_fr_m9, lc_months_fr_m10, lc_months_fr_m11, lc_months_fr_m12
}; 

const u8 *PROGMEM lc_builtin_months_es[] = {
    lc_months_es_m1, lc_months_es_m2, lc_months_es_m3, lc_months_es_m4,
    lc_months_es_m5, lc_months_es_m6, lc_months_es_m7, lc_months_es_m8,
    lc_months_es_m9, lc_months_es_m10, lc_months_es_m11, lc_months_es_m12
};

const lc_list PROGMEM l_builtin_months[] = {
    LC_EN_LIST((const u8 *) lc_builtin_months_en)
    LC_FR_LIST((const u8 *) lc_builtin_months_fr)
    LC_ES_LIST((const u8 *) lc_builtin_months_es)
    LC_END_LIST
};


/* Standard validations:
    These functions are currently referenced by name. */

lc_char PROGMEM lc_err_numeric_month[] = {
    LC_EN("month must be between 1 and 12")
    LC_FR("le mois doit etre entre 1 et 12")
    LC_ES("el mes debe ser un n\6mero entre 1 y 12")
    LC_END
};

u8 is_numeric_month(schema_list_t *l, schema_item_t *i)
{
    if ((i->data_type == TS_INTEGER || i->data_type == TS_SELECT) &&
        (i->value.integer >= 1 && i->value.integer <= 12)) {
        
        return TRUE;
    }

    return schema_item_fail_validation(i, locale(lc_err_numeric_month));
}


lc_char PROGMEM lc_err_numeric_year[] = {
    LC_EN("year must be between 2012 and 2099")
    LC_FR("l'ann\5e doit etre entre 2012 et 2099")
    LC_ES("el a\175o debe ser un n\6mero entre 2012 y 2099")
    LC_END
};

u8 is_numeric_year(schema_list_t *l, schema_item_t *i)
{
    if (i->data_type == TS_INTEGER &&
            i->value.integer >= 2012 && i->value.integer <= 2099) {
        return TRUE;
    }

    return schema_item_fail_validation(i, locale(lc_err_numeric_year));
}


lc_char PROGMEM lc_err_numeric_day[] = {
    LC_EN("day must be between 1 and 31")
    LC_FR("la date doit etre entre 1 et 31")
    LC_ES("el d\7a debe ser un n\6mero entre 1 y 31")
    LC_END
};

u8 is_numeric_day(schema_list_t *l, schema_item_t *i)
{
    if (i->data_type == TS_INTEGER &&
            i->value.integer >= 1 && i->value.integer <= 31) {
        return TRUE;
    }

    return schema_item_fail_validation(i, locale(lc_err_numeric_day));
}


lc_char PROGMEM lc_err_numeric_daysago[] = {
    LC_EN("Days ago must be between 0 and 7")
    LC_FR("la date doit etre entre 0 et 7")
    LC_ES("el d\7a debe ser un n\6mero entre 1 y 31")
    LC_UN("\x84\x08\x42\x80\x9\x66\x0\x20\x9\x26"
          "\x9\x47\x9\x16\x9\x3f\x0\x20\x9\x6d\x0\x20"
          "\x9\x2d\x9\x3f\x9\x24\x9\x4d\x9\x30\x9\x15"
          "\x9\x4b\x0\x20\x9\x5\x9\x19\x9\x4d\x9\x15"
          "\x0\x20\x9\x2d\x9\x30\x9\x4d\x9\x28\x9\x41"
          "\x9\x39\x9\x4b\x9\x38\x9\x4d\x9\x64\x0\x0")
    LC_END
};

u8 is_numeric_daysago(schema_list_t *l, schema_item_t *i)
{
    if (i->data_type == TS_INTEGER &&
            i->value.integer >= 0 && i->value.integer <= 7) {
        return TRUE;
    }

    return schema_item_fail_validation(i, locale(lc_err_numeric_daysago));
}

#endif /* _SCHEMA_INCLUDE_DATES */

/* ----------------------------------------------------------------------*/


/* Pointer to current settings */
schema_list_t *schema_settings;


/* Strings for user interface */
lc_char PROGMEM lc_pin_prompt[] = {
    LC_EN("Please enter PIN")
    LC_FR("Entrez votre code d'acc\4s")
    LC_ES("Ingrese su contrase\175a")
    LC_UN("\x84\x08\x2a\x80\x9\x6\x9\x2b\x9\x4d\x9\x28"
          "\x9\x4b\x0\x20\x9\x2a\x9\x3f\x9\x28\x0\x20"
          "\x9\x32\x9\x47\x9\x16\x9\x4d\x9\x28\x9\x41"
          "\x9\x39\x9\x4b\x9\x38\x9\x4d\x0\x0")
    LC_END
};

lc_char PROGMEM lc_menu_edit[] = {
    LC_EN("Revise")
    LC_UN("\x84\x08\xe\x80\x9\x2c\x9\x26\x9\x32\x9\x4d\x9\x28\x9\x47\x0\x0")
    LC_FR("Reviser")
    LC_ES("Verificar")
    LC_END
};

lc_char PROGMEM lc_menu_save[] = {
    LC_EN("Save")
    LC_UN("\x84\x08\x8\x80\x9\x38\x9\x47\x9\x2d\x0\x0")
    LC_FR("Sauvegarder")
    LC_ES("Guardar")
    LC_END
};

lc_char PROGMEM lc_menu_show[] = {
    LC_EN("Show")
    LC_UN("\x84\x08\xe\x80\x9\x39\x9\x47"
          "\x9\x30\x9\x4d\x9\x28\x9\x47\x0\x0")
    LC_FR("Montrer d\5tails")
    LC_ES("Mostrar")
    LC_END
};

lc_char PROGMEM lc_menu_send[] = {
    LC_EN("Transmit")
    LC_UN("\x84\x08\xe\x80\x9\x2a\x9\x20\x9\x3e\x9\x9\x9\x28\x9\x47\x0\x0")
    LC_FR("Envoyer")
    LC_ES("Enviar")
    LC_END
};

lc_char PROGMEM lc_menu_clear[] = {
    LC_EN("Erase")
    LC_ES("Borrar")
    LC_UN("\x84\x08\xe\x80\x9\x39\x9\x1f\x9\x3e\x9\x9\x9\x28\x9\x47\x0\x0")
    LC_END
};


/* Important Notice - FIXME before building:
    Before compiling a master build for duplication and
    deployment, you *must* set this to an appropriate value.
    There is no length restriction; any string of digits is okay. */

lc_char PROGMEM lc_pin[] = {
    LC_EN("633120")
    LC_FR("633120")
    LC_ES("633120")
    LC_END
};


{{#forms}}
    schema_list_t *schema_{{meta.code}};
{{/forms}}


lc_char PROGMEM lc_topmenu_name[] = {
    LC_EN("SIM Services")
    LC_FR("Services SIM")
    LC_ES("Servicios de SIM")
    LC_UN("\x84\x08\x1c\x80\x9\x38\x9\x3f\x9\x2e\x0\x20"
          "\x9\x38\x9\x30\x9\x4d\x9\x2d\x9\x3f\x9\x38"
          "\x9\x47\x9\x38\x9\x4d\x0\x0")
    LC_END
};


/* ----------------------------------------------------------------------*/

/**
 */
void delete_user_schemas()
{
    {{#forms}}
        if (schema_{{meta.code}}) {
            schema_list_delete(schema_{{meta.code}});
            schema_{{meta.code}} = NULL;
        }
    {{/forms}}
};

/* ----------------------------------------------------------------------*/


/* Top-level menu:
    This provides access to Medic-branded SIM tools. */

lc_char PROGMEM lc_menu_top[] = {
    LC_EN("Medic Mobile")
    LC_FR("Medic Mobile")
    LC_ES("Medic Mobile")
    LC_UN("\x84\x08\x1a\x80\x9\x2e\x9\x47\x9\x21\x9\x3f\x9\x15"
          "\x0\x20\x9\x2e\x9\x4b\x9\x2c\x9\x3e\x9\x8\x9\x32\x0\x0")
    LC_END
};

u8 menu_top_ctx(SCtx *ctx, u8 action)
{
    if (action == APP_ENTER) {
        delete_user_schemas();
    }

    return APP_OK;
}

SNodeP menu_top_n = { lc_menu_top, menu_top_ctx };


/* ----------------------------------------------------------------------*/


/* About:
    Shows version and copyright information. */


lc_char PROGMEM lc_menu_about[] = {
    LC_EN("About")
    LC_FR("A propos")
    LC_ES("Acerca de")
    LC_UN("\x84\x08\xa\x80\x9\x2c\x9\x3e\x9\x30\x9\x47\x0\x0")
    LC_END
};

lc_char PROGMEM lc_about_text[] = {
    LC_EN(
        PROGRAM_NAME " " PROGRAM_VERSION "\n\n"
        PROGRAM_COPYRIGHT " " PROGRAM_COPYRIGHT_EXTRA " "
        PROGRAM_RIGHTS "\n\n" PROGRAM_DISTRIBUTION "\n"
    )
    LC_FR(
        PROGRAM_NAME " " PROGRAM_VERSION "\n\n"
        PROGRAM_COPYRIGHT " " PROGRAM_COPYRIGHT_EXTRA " "
        PROGRAM_RIGHTS "\n\n" PROGRAM_DISTRIBUTION "\n"
    )
    LC_ES(
        PROGRAM_NAME " " PROGRAM_VERSION "\n\n"
        PROGRAM_COPYRIGHT " " PROGRAM_COPYRIGHT_EXTRA " "
        PROGRAM_RIGHTS "\n\n" PROGRAM_DISTRIBUTION "\n"
    )
    LC_END
};

u8 menu_about_ctx(SCtx *ctx, u8 action)
{
    if (action == APP_ENTER) {
        display_text(locale(lc_about_text), NULL);
    }

    return APP_OK;
}

SNodeP menu_about_n = {
    lc_menu_about, menu_about_ctx
};


/* ----------------------------------------------------------------------*/


#ifdef _CONFIRM_MISOPROSTOL

    /* Misoprostol confirmation */
    lc_char PROGMEM lc_confirm_misoprostol[] = {

        LC_EN(
            "Warning! Please counsel the mother. "
            "Misoprostol should only be given after the 7th month."
        )
        LC_UN(
            "\x84\x08\xbe\x80\x9\x38\x9\x3e\x9\x2c\x9\x27\x9\x3e"
            "\x9\x28\x0\x21\x0\x20\x9\x15\x9\x43\x9\x2a\x9\x2f\x9\x3e"
            "\x0\x20\x9\x6\x9\x2e\x9\x3e\x9\x32\x9\x3e\x9\x8\x0\x20\x9\x2a"
            "\x9\x30\x9\x3e\x9\x2e\x9\x30\x9\x4d\x9\x36\x0\x20\x9\x17\x9\x30"
            "\x9\x4d\x9\x28\x9\x41\x9\x39\x9\x4b\x9\x38\x9\x4d"
            "\x0\x2c\x0\x20\x9\x2e\x9\x3e\x9\x24\x9\x4d\x9\x30\x9\x40"
            "\x0\x2d\x9\x38\x9\x41\x9\x30\x9\x15\x9\x4d\x9\x37\x9\x3e\x0\x20"
            "\x9\x1a\x9\x15\x9\x4d\x9\x15\x9\x40\x0\x20\x9\x38\x9\x3e"
            "\x9\x24\x0\x20\x9\x2e\x9\x39\x9\x3f\x9\x28\x9\x3e"
            "\x0\x20\x9\x2a\x9\x41\x9\x30\x9\x3e\x0\x20\x9\x2d\x9\xf"
            "\x0\x20\x9\x2a\x9\x1b\x9\x3f\x0\x20\x9\x2e\x9\x3e\x9\x24"
            "\x9\x4d\x9\x30\x0\x20\x9\x26\x9\x3f\x9\x7\x9\x28\x9\x1b\x0\x0"
        )
        LC_END
    };

    u8 confirm_misoprostol(schema_list_t *l, schema_item_t *i) {

        display_text(locale(lc_confirm_misoprostol), NULL);
        return TRUE;
    }

    /* Warning:
        Show reminder when misoprostol was not used. */

    lc_char PROGMEM lc_misoprostol_return[] = {

        LC_EN(
            "Please make sure you take the misoprostol tablets back!"
        )
        LC_UN(
            "\x84\x08\x66\x80\x9\x15\x9\x43\x9\x2a\x9\x2f\x9\x3e\x0\x20"
            "\x9\x2e\x9\x3e\x9\x24\x9\x43\x0\x2d\x9\x38\x9\x41\x9\x30"
            "\x9\x15\x9\x4d\x9\x37\x9\x3e\x0\x20\x9\x1a\x9\x15\x9\x4d\x9\x15"
            "\x9\x40\x0\x20\x9\x2b\x9\x3f\x9\x30\x9\x4d\x9\x24\x9\x3e\x0\x20"
            "\x9\x32\x9\x3f\x9\x28\x0\x20\x9\x28\x9\x2c\x9\x3f\x9\x30"
            "\x9\x4d\x9\x38\x9\x3f\x9\x28\x9\x41\x9\x39\x9\x4b\x9\x32"
            "\x9\x3e\x0\x21\x0\x0"
        )
        LC_END
    };

    u8 confirm_misoprostol_return(schema_list_t *l, schema_item_t *i) {

        if (i->value.integer == 2) {
            display_text(locale(lc_misoprostol_return), NULL);
        }
        
        return TRUE;
    }

    /* Warning:
        Show when advice was not received from a health worker. */

    lc_char PROGMEM lc_advice_received[] = {

        LC_EN(
            "Please make sure that this form is transmitted immediately. "
            "A health worker will call you ASAP."
        )
        LC_UN(
           "\x84\x08\xbc\x80\x9\x2f\x9\x4b\x0\x20\x9\x2b\x9\x3e\x9\x30"
           "\x9\x2e\x0\x20\x9\x24\x9\x41\x9\x30\x9\x41\x9\x28\x9\x4d"
           "\x9\x24\x0\x20\x9\x2a\x9\x20\x9\x3e\x9\x9\x9\x28\x9\x41\x9\x39"
           "\x9\x4b\x9\x32\x9\x3e\x9\x64\x0\x20\x9\x24\x9\x4d\x9\x2f"
           "\x9\x38\x9\x4b\x0\x20\x9\x17\x9\x30\x9\x47\x9\x2e\x9\x3e\x0\x20"
           "\x9\x38\x9\x4d\x9\x35\x9\x3e\x9\x38\x9\x4d\x9\x25\x9\x4d"
           "\x9\x2f\x9\x15\x9\x30\x9\x4d\x9\x2e\x9\x3f\x9\x32\x9\x47\x0\x20"
           "\x9\x38\x9\x15\x9\x47\x9\x38\x9\x2e\x9\x4d\x9\x2e\x0\x20"
           "\x9\x1b\x9\x3f\x9\x1f\x9\x4b\x0\x20\x9\x24\x9\x2a\x9\x3e"
           "\x9\x8\x9\x32\x9\x3e\x9\x8\x0\x20\x9\x2b\x9\x4b\x9\x28\x0\x20"
           "\x9\x17\x9\x30\x9\x4d\x9\x28\x9\x41\x9\x39\x9\x41\x9\x28"
           "\x9\x47\x9\x1b\x9\x64\x0\x0" 
        )
        LC_END
    };

    u8 confirm_advice_received(schema_list_t *l, schema_item_t *i) {

        if (i->value.integer == 2) {
            display_text(locale(lc_advice_received), NULL);
        }
        
        return TRUE;
    }

    /* Warning:
        Show when patient was not referred to facility. */

    lc_char PROGMEM lc_patient_referred[] = {

        LC_EN(
            "Please refer the patient to the health facility immediately."
        )
        LC_UN(
            "\x84\x08\x6c\x80\x9\x15\x9\x43\x9\x2a\x9\x2f\x9\x3e\x0\x20"
            "\x9\x2e\x9\x39\x9\x3f\x9\x32\x9\x3e\x9\x32\x9\x3e\x9\x8\x0\x20"
            "\x9\x24\x9\x41\x9\x30\x9\x41\x9\x28\x9\x4d\x9\x24\x0\x20\x9\x38"
            "\x9\x4d\x9\x35\x9\x3e\x9\x38\x9\x4d\x9\x25\x9\x4d\x9\x2f\x0\x20"
            "\x9\x38\x9\x2\x9\x38\x9\x4d\x9\x25\x9\x3e\x9\x2e\x9\x3e\x0\x20"
            "\x9\x2a\x9\x20\x9\x3e\x9\x9\x9\x28\x9\x41\x9\x39\x9\x4b\x9\x32"
            "\x9\x3e\x9\x64\x0\x0"
        )
        LC_END
    };

    u8 confirm_patient_referred(schema_list_t *l, schema_item_t *i) {

        if (i->value.integer == 2) {
            display_text(locale(lc_patient_referred), NULL);
        }
        
        return TRUE;
    }

#endif /* _CONFIRM_MISOPROSTOL */


/* ----------------------------------------------------------------------*/


/* Schema:
    Muvuku application settings */

lc_char PROGMEM lc_menu_settings[] = {
    LC_EN("Settings")
    LC_FR("Param\4tres")
    LC_ES("Configuraci\10n")
    LC_UN("\x84\x08\x10\x80\x9\x38\x9\x47\x9\x1f\x9\x3f\x9\x2\x9\x38\x9\x4d\x0\x0")
    LC_END
};

u8 menu_settings_ctx (SCtx *ctx, u8 action)
{
    if (action == APP_ENTER) {

        /* PIN Entry:
            Require a password for changing the SMS phone number. */

        if (!muvuku_require_pin(locale(lc_pin_prompt), locale(lc_pin))) {
            return APP_BACK;
        }

        schema_list_prompt(schema_settings, FL_NONE);
    }
    
    return APP_OK;
}


SNodeP menu_settings_n = {
    lc_menu_settings, menu_settings_ctx
};


/* ----------------------------------------------------------------------*/

{{#forms}}
    #include "../output/forms/{{meta.code}}.c"
{{/forms}}

/* ----------------------------------------------------------------------*/


/* Edge data:
    This structure contains all possible navigation paths. */

SEdgeP menu_edges_p[] = {

    {{#forms}}
        { &menu_top_n, &menu_{{meta.code}}_n },
    {{/forms}}

    { &menu_top_n, &menu_settings_n },
    { &menu_top_n, &menu_about_n },

    {{#forms}}
        { &menu_{{meta.code}}_n, &menu_{{meta.code}}_edit_n },
        #ifndef _DISABLE_STORAGE
            { &menu_{{meta.code}}_n, &menu_{{meta.code}}_save_n },
            #ifdef _ENABLE_STORAGE_INFO
                { &menu_{{meta.code}}_n, &menu_{{meta.code}}_show_n },
            #endif /* _ENABLE_STORAGE_INFO */
            #ifdef _ENABLE_STORAGE_CLEAR
                { &menu_{{meta.code}}_n, &menu_{{meta.code}}_clear_n },
            #endif /* _ENABLE_STORAGE_CLEAR */
        #endif /* ! _DISABLE_STORAGE */
        { &menu_{{meta.code}}_n, &menu_{{meta.code}}_send_n },
    {{/forms}}

    { NULL, NULL }
};


/* Top-level STK handler:
    This draws the top-level menu, using the spider library. */

void action_menu(void *data)
{
    /* Start pooled-storage subsystem */
    muvuku_subsystem_init_pool();

    SCtx *c = spider_init();

    if (c == NULL)
        return;

    c->n = (SNode *) &menu_top_n;
    c->eP = (SEdgeP *) &menu_edges_p;
    c->style |= SPIDER_STYLE_UCS2;

    {{#forms}}
        schema_{{meta.code}} = NULL;
    {{/forms}}

    schema_settings = muvuku_settings_schema();
    muvuku_settings_read(app_data(), schema_settings);

    spider(c);
    delete_user_schemas();
    schema_list_delete(schema_settings);
}


/* Entry point:
    The application starts here. */

void turbo_handler(u8 action, void *data)
{
    /* Start pooled-storage subsystem */
    muvuku_subsystem_init_pool();

    switch (action)
    {
        case ACTION_APP_REGISTER:
        {
            set_proc_8(PROC_8_CONFIG_SETUP, 0);
            set_proc_8(PROC_8_LANGUAGE, LC_ENGLISH);
            /* set_proc_8(PROC_8_LANGUAGE, LC_SPANISH); */
            /* set_proc_8(PROC_8_LANGUAGE, LC_FRENCH); */
            /* set_proc_8(PROC_8_LANGUAGE, LC_UNSPECIFIED); */
            reg_app_data(muvuku_settings_create());
            break;
        }

        case ACTION_APP_UNREGISTER:
        {
            muvuku_settings_delete(app_data());
            break;
        }
        case ACTION_APP_INIT:
            break;

        case ACTION_INSERT_MENU:
            insert_menu(locale(lc_menu_top));
            set_menu_alpha(locale(lc_topmenu_name));
            break;

        case ACTION_MENU_SELECTION:
            stk_thread(action_menu, data);
            break;

        default:
            break;
    }
}

/* ----------------------------------------------------------------------*/

