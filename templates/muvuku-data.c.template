
/**
 * Muvuku: An STK data collection framework
 *
 * Copyright 2011-2012 Medic Mobile, Inc. <hello@medicmobile.org>
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL MEDIC MOBILE BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "muvuku.h"

/**
    IMPORTANT:
        This file is generated automatically at build-time.
        Do not edit this file directly -- to make changes
        to a form, please modify the contents of forms/json.
**/

/* ----------------------------------------------------------------------*/

/* String table:
    This section contains strings used as question captions,
    or as components of a reference list for a 'choice' field. */

{{#eachProperty strings}}
    {{#if value.localized}}
        lc_char PROGMEM {{property}}[] = {
            {{#value.list}}
                LC_{{toUpper language}}("{{value}}")
            {{/value.list}}
            LC_END
        };
    {{else}}
        {{#value.list}}
            u8 PROGMEM {{name}}[] = "{{value}}";
        {{/value.list}}
    {{/if}}
{{/eachProperty}}


/* ----------------------------------------------------------------------*/

/* Reference lists:
    This section contains tables of pointers to localized
    strings, and are used when displaying 'choice' fields. */

{{#eachProperty lists}}
    {{#eachProperty value.map}}
        const u8 *PROGMEM {{value.name}}[] = {
            {{#value.list}}
                {{ref}},
            {{/value.list}}
            NULL
        };
    {{/eachProperty}}
    const lc_list PROGMEM {{value.name}}[] = {
        {{#eachProperty value.map}}
            LC_{{toUpper value.language}}_LIST((const u8 *) {{value.name}})
        {{/eachProperty}}
        LC_END_LIST
    };
{{/eachProperty}}

/* ----------------------------------------------------------------------*/

/* Condition functions:
    This section contains zero or more generated condition functions,
    each of which corresponds to a single `schema_item`'s skip rule. */


{{#eachProperty conditions}}
    static u8 {{property}}(schema_list_t *l, schema_item_t *i) {
        {{#if value.operator_is_logical_or}}
            /* Condition operator: Logical or ('||') */
            {{#eachProperty value.equal}}
                do {
                    schema_item_t *fi = schema_list_get(l, {{property}});

                    if (schema_item_compare_integer(fi, {{value}})) {
                        return TRUE;
                    }
                } while (0);
            {{/eachProperty}}
            return FALSE;
        {{else}}
            /* Condition operator: Logical and ('&&') */
            {{#eachProperty value.equal}}
                do {
                    schema_item_t *fi = schema_list_get(l, {{property}});

                    if (!schema_item_compare_integer(fi, {{value}})) {
                        return FALSE;
                    }
                } while (0);
            {{/eachProperty}}
            return TRUE;
        {{/if}}
    }
{{/eachProperty}}


/* ----------------------------------------------------------------------*/

/* Form data:
    This section contains the actual form data/fields. */

const u8 PROGMEM lc_{{meta.code}}_code[] = "{{toUpper meta.code}}";

schema_list_t *muvuku_{{meta.code}}_schema()
{
    SCHEMA_BEGIN(rv, lc_{{meta.code}}_code, {{meta.count_expanded}});
    {{#eachProperty fields}}
        /* {{value.comment}} */
        {{#if value.is_date_type}}
            SCHEMA_ITEM(locale({{value.ref}}_year), TS_INTEGER, 4, 4);
                SCHEMA_ITEM_VALIDATE(is_numeric_year);
            SCHEMA_ITEM(locale({{value.ref}}_month), TS_SELECT, 1, 2);
                SCHEMA_ITEM_DELIMITER('-');
                SCHEMA_ITEM_SELECT(12, NULL, locale_list(l_builtin_months));
                SCHEMA_ITEM_VALIDATE(is_numeric_month);
            SCHEMA_ITEM(locale({{value.ref}}_day), TS_INTEGER, 1, 2);
                SCHEMA_ITEM_VALIDATE(is_numeric_day);
                SCHEMA_ITEM_DELIMITER('-');
        {{else}}
            {{#if value.is_month_type}}
                SCHEMA_ITEM(locale({{value.ref}}), TS_SELECT, 1, 2);
                    SCHEMA_ITEM_SELECT(12, NULL, locale_list(l_builtin_months));
                    SCHEMA_ITEM_VALIDATE(is_numeric_month);
            {{else}}
                SCHEMA_ITEM(
                    locale({{value.ref}}), TS_{{toUpper value.type}},
                        {{value.length.lower}}, {{value.length.upper}}
                );
            {{/if}}
            {{#if value.is_integer_type}}
                SCHEMA_ITEM_VALIDATE(is_numeric);
            {{/if}}
        {{/if}}
        {{#if value.list_ref}}
            SCHEMA_ITEM_SELECT(
                {{value.list.size}}, NULL, locale_list({{value.list_ref}})
            );
        {{/if}}
        {{#if value.validations}}
            {{#eachProperty value.validations}}
                SCHEMA_ITEM_VALIDATE({{property}});
            {{/eachProperty}}
        {{/if}}
        {{#if value.triggers}}
            {{#eachProperty value.triggers}}
                SCHEMA_ITEM_TRIGGER({{property}});
            {{/eachProperty}}
        {{/if}}
        {{#if value.conditions}}
            {{#eachProperty value.conditions}}
                SCHEMA_ITEM_CONDITION({{property}});
            {{/eachProperty}}
        {{/if}}
        {{#if value.flags}}
            {{#eachProperty value.flags}}
                SCHEMA_ITEM_FLAGS(FL_{{toUpper property}});
            {{/eachProperty}}
        {{/if}}
    {{/eachProperty}}
    SCHEMA_END();

    return rv;
}

/* ----------------------------------------------------------------------*/

/* Menu code:
    This section contains menu/navigation code,
    and is invoked by Muvuku when the form is opened. */

lc_char PROGMEM lc_menu_{{meta.code}}[] = {
    {{#eachProperty meta.label}}
        LC_{{toUpper property}}("{{value}}")
    {{/eachProperty}}
    LC_END

};

u8 menu_{{meta.code}}_ctx (SCtx *ctx, u8 action)
{
    if (action == APP_ENTER) {

        if (!schema_{{meta.code}}) {
            schema_{{meta.code}} = muvuku_{{meta.code}}_schema();
        }

        /* Special case:
            Skip the enter/send menu unless the form has data. */

        if (!schema_list_count(schema_{{meta.code}}, TRUE)) {
            schema_list_prompt(schema_{{meta.code}}, PR_NORMAL);
        }
    }

    return APP_OK;
}

SNodeP menu_{{meta.code}}_n = {
    lc_menu_{{meta.code}}, menu_{{meta.code}}_ctx
};

/* ----------------------------------------------------------------------*/

u8 menu_{{meta.code}}_edit_ctx (SCtx *ctx, u8 action)
{
    if (action == APP_ENTER) {
        schema_list_prompt(schema_{{meta.code}}, FL_NONE);
    }

    return APP_OK;
}

SNodeP menu_{{meta.code}}_edit_n = {
    lc_menu_edit, menu_{{meta.code}}_edit_ctx
};

/* ----------------------------------------------------------------------*/
#ifndef _DISABLE_STORAGE

    u8 menu_{{meta.code}}_save_ctx (SCtx *ctx, u8 action)
    {
        schema_list_t *s = schema_settings;
        muvuku_settings_t *app = app_data();

        if (action == APP_ENTER) {
            muvuku_action_save_explicit(app, s, schema_{{meta.code}});
        };

        return APP_BACK;
    }

    SNodeP menu_{{meta.code}}_save_n = {
        lc_menu_save, menu_{{meta.code}}_save_ctx
    };

#endif /* !_DISABLE_STORAGE */

/* ----------------------------------------------------------------------*/

#ifndef _DISABLE_STORAGE
    #ifdef _ENABLE_STORAGE_INFO

        u8 menu_{{meta.code}}_show_ctx (SCtx *ctx, u8 action)
        {
            schema_list_t *s = schema_settings;
            muvuku_settings_t *app = app_data();

            if (action == APP_ENTER) {
                muvuku_action_show(app, s, schema_{{meta.code}});
            };

            return APP_OK;
        }

        SNodeP menu_{{meta.code}}_show_n = {
            lc_menu_show, menu_{{meta.code}}_show_ctx
        };

    #endif /* _ENABLE_STORAGE_INFO */
#endif /* ! _DISABLE_STORAGE */

/* ----------------------------------------------------------------------*/

u8 menu_{{meta.code}}_send_ctx (SCtx *ctx, u8 action)
{
    schema_list_t *s = schema_settings;
    muvuku_settings_t *app = app_data();

    if (action == APP_ENTER) {
        #ifdef _DISABLE_STORAGE
            muvuku_action_send_without_save(app, s, schema_{{meta.code}});
        #else
            if (muvuku_action_save_implicit(app, s, schema_{{meta.code}})) {
                muvuku_action_send(app, s, schema_{{meta.code}});
            }
        #endif /* _DISABLE_STORAGE */

    };

    return APP_BACK;
}

SNodeP menu_{{meta.code}}_send_n = {
    lc_menu_send, menu_{{meta.code}}_send_ctx
};


/* ----------------------------------------------------------------------*/

#ifndef _DISABLE_STORAGE
    #ifdef _ENABLE_STORAGE_CLEAR
        u8 menu_{{meta.code}}_clear_ctx (SCtx *ctx, u8 action)
        {
            schema_list_t *s = schema_settings;
            muvuku_settings_t *app = app_data();

            if (action == APP_ENTER) {
                muvuku_action_clear(app, s, schema_{{meta.code}});
            };

            return APP_BACK;
        }

        SNodeP menu_{{meta.code}}_clear_n = {
            lc_menu_clear, menu_{{meta.code}}_clear_ctx
        };

    #endif /* _ENABLE_STORAGE_CLEAR */
#endif /* ! _DISABLE_STORAGE */

/* ----------------------------------------------------------------------*/

